\nimport \'package:cloud_firestore/cloud_firestore.dart\';\nimport \'package:flutter/material.dart\';\nimport \'package:intl/intl.dart\';\nimport \'package:myapp/constants.dart\';\n\nclass OrderDetailScreen extends StatefulWidget {\n  final String orderId;\n\n  const OrderDetailScreen({super.key, required this.orderId});\n\n  @override\n  State<OrderDetailScreen> createState() => _OrderDetailScreenState();\n}\n\nclass _OrderDetailScreenState extends State<OrderDetailScreen> {\n  DocumentSnapshot? _order;\n  bool _isLoading = true;\n  String? _selectedStatus;\n\n  final List<String> _orderStatuses = [\n    \'Order Placed\',\n    \'Processing\',\n    \'Shipped\',\n    \'Completed\',\n    \'Cancelled\',\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    _fetchOrderDetails();\n  }\n\n  Future<void> _fetchOrderDetails() async {\n    try {\n      final doc = await FirebaseFirestore.instance.collection(ORDERS_COLLECTION_PATH).doc(widget.orderId).get();\n      if (mounted) {\n        setState(() {\n          _order = doc;\n          _selectedStatus = (doc.data() as Map<String, dynamic>)[\'status\'];\n          _isLoading = false;\n        });\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(\'Error fetching order details: $e\')),\n      );\n      setState(() {\n        _isLoading = false;\n      });\n    }\n  }\n\n  Future<void> _updateStatus() async {\n    if (_selectedStatus == null) return;\n\n    try {\n      await FirebaseFirestore.instance.collection(ORDERS_COLLECTION_PATH).doc(widget.orderId).update({\n        \'status\': _selectedStatus,\n        \'updatedAt\': FieldValue.serverTimestamp(),\n      });\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(content: Text(\'Order status updated successfully!\')),
      );\n      Navigator.of(context).pop();\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(\'Failed to update status: $e\')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return Scaffold(\n        appBar: AppBar(title: const Text(\'Order Details\')),\n        body: const Center(child: CircularProgressIndicator()),\n      );\n    }\n\n    if (_order == null) {\n      return Scaffold(\n        appBar: AppBar(title: const Text(\'Order Details\')),\n        body: const Center(child: Text(\'Order not found!\')),\n      );\n    }\n\n    final orderData = _order!.data() as Map<String, dynamic>;\n    final Timestamp timestamp = orderData[\'createdAt\'] ?? Timestamp.now();\n    final String formattedDate = DateFormat(\'dd MMM, yyyy, hh:mm a\').format(timestamp.toDate());\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\'Order Details\'),\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\'Order ID: ${widget.orderId}\', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),\n            const SizedBox(height: 10),\n            Text(\'Placed on: $formattedDate\'),\n            Text(\'User: ${orderData[\'userName\'] ?? \'N/A\'}\'),\n            Text(\'User ID: ${orderData[\'userId\'] ?? \'N/A\'}\'),\n            const Divider(height: 30),\n\n            const Text(\'Items:\', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),\n            if (orderData.containsKey(\'items\') && orderData[\'items\'] is List) ...{\n              for (var item in orderData[\'items\']) {\n                final product = item as Map<String, dynamic>;\n                yield ListTile(\n                  title: Text(product[\'productName\'] ?? \'Unknown Product\'),\n                  subtitle: Text(\'Quantity: ${product[\'quantity\']}\'),\n                  trailing: Text(\'\$${product[\'price\']}\'),\n                );\n              }\n            },\n            const Divider(height: 30),\n\n            Text(\'Total Amount: \$${orderData[\'totalAmount\'] ?? 0}\', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),\n            const SizedBox(height: 30),\n\n            const Text(\'Update Status:\', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),\n            const SizedBox(height: 10),\n            DropdownButtonFormField<String>(\n              value: _selectedStatus,\n              decoration: const InputDecoration(border: OutlineInputBorder()),\n              items: _orderStatuses.map((status) {\n                return DropdownMenuItem<String>(\n                  value: status,\n                  child: Text(status),\n                );\n              }).toList(),\n              onChanged: (value) {\n                setState(() {\n                  _selectedStatus = value;\n                });\n              },\n            ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: _updateStatus,\n              child: const Text(\'Save Status\'),\n              style: ElevatedButton.styleFrom(minimumSize: const Size(double.infinity, 50)),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n