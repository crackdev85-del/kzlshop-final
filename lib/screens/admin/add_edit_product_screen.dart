\nimport \'package:cloud_firestore/cloud_firestore.dart\';\nimport \'package:flutter/material.dart\';\nimport \'package:myapp/constants.dart\';\n\nclass AddEditProductScreen extends StatefulWidget {\n  final String? documentId;\n\n  const AddEditProductScreen({super.key, this.documentId});\n\n  @override\n  State<AddEditProductScreen> createState() => _AddEditProductScreenState();\n}\n\nclass _AddEditProductScreenState extends State<AddEditProductScreen> {\n  final _formKey = GlobalKey<FormState>();\n  final _nameController = TextEditingController();\n  final _descriptionController = TextEditingController();\n  final _priceController = TextEditingController();\n  final _imageUrlController = TextEditingController();\n\n  String? _selectedCategory;\n  List<DocumentSnapshot> _categories = [];\n\n  bool _isLoading = false;\n  bool _isEditing = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _isEditing = widget.documentId != null;\n    _fetchCategories();\n    if (_isEditing) {\n      _fetchProductDetails();\n    }\n  }\n\n  Future<void> _fetchCategories() async {\n    try {\n      final snapshot = await FirebaseFirestore.instance.collection(CATEGORIES_COLLECTION_PATH).get();\n      if (mounted) {\n        setState(() {\n          _categories = snapshot.docs;\n        });\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(\'Error fetching categories: $e\')),\n      );\n    }\n  }\n\n  Future<void> _fetchProductDetails() async {\n    try {\n      final doc = await FirebaseFirestore.instance.collection(PRODUCTS_COLLECTION_PATH).doc(widget.documentId).get();\n      final data = doc.data() as Map<String, dynamic>;\n\n      _nameController.text = data[\'name\'] ?? \'\';\n      _descriptionController.text = data[\'description\'] ?? \'\';\n      _priceController.text = (data[\'price\'] ?? 0).toString();\n      _imageUrlController.text = data[\'imageUrl\'] ?? \'\';\n      if (mounted) {\n        setState(() {\n          _selectedCategory = data[\'categoryId\'];\n        });\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(\'Error fetching product details: $e\')),\n      );\n    }\n  }\n\n  Future<void> _saveProduct() async {\n    if (!_formKey.currentState!.validate()) {\n      return;\n    }\n\n    setState(() {\n      _isLoading = true;\n    });\n\n    try {\n      final productData = {\n        \'name\': _nameController.text.trim(),\n        \'description\': _descriptionController.text.trim(),\n        \'price\': double.tryParse(_priceController.text.trim()) ?? 0.0,\n        \'imageUrl\': _imageUrlController.text.trim(),\n        \'categoryId\': _selectedCategory,\n        \'updatedAt\': FieldValue.serverTimestamp(),\n      };\n\n      if (_isEditing) {\n        await FirebaseFirestore.instance\n            .collection(PRODUCTS_COLLECTION_PATH)\n            .doc(widget.documentId)\n            .update(productData);\n      } else {\n        productData[\'createdAt\'] = FieldValue.serverTimestamp();\n        await FirebaseFirestore.instance.collection(PRODUCTS_COLLECTION_PATH).add(productData);\n      }\n\n      if (!mounted) return;\n      Navigator.of(context).pop();\n\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text(\'Failed to save product: $e\')),\n      );\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(_isEditing ? \'Edit Product\' : \'Add Product\'),\n      ),\n      body: _isLoading\n          ? const Center(child: CircularProgressIndicator())\n          : SingleChildScrollView(\n              padding: const EdgeInsets.all(16.0),\n              child: Form(\n                key: _formKey,\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.stretch,\n                  children: [\n                    TextFormField(\n                      controller: _nameController,\n                      decoration: const InputDecoration(labelText: \'Product Name\'),\n                      validator: (value) => value!.isEmpty ? \'Please enter a name\' : null,\n                    ),\n                    const SizedBox(height: 16),\n                    TextFormField(\n                      controller: _descriptionController,\n                      decoration: const InputDecoration(labelText: \'Description\'),\n                      maxLines: 3,\n                    ),\n                    const SizedBox(height: 16),\n                    TextFormField(\n                      controller: _priceController,\n                      decoration: const InputDecoration(labelText: \'Price\'),\n                      keyboardType: const TextInputType.numberWithOptions(decimal: true),\n                      validator: (value) => value!.isEmpty ? \'Please enter a price\' : null,\n                    ),\n                    const SizedBox(height: 16),\n                    TextFormField(\n                      controller: _imageUrlController,\n                      decoration: const InputDecoration(labelText: \'Image URL\'),\n                    ),\n                    const SizedBox(height: 16),\n                    DropdownButtonFormField<String>(\n                      value: _selectedCategory,\n                      decoration: const InputDecoration(labelText: \'Category\'),\n                      items: _categories.map((doc) {\n                        return DropdownMenuItem<String>(\n                          value: doc.id,\n                          child: Text((doc.data() as Map<String, dynamic>)[\'name\'] ?? \'\'),\n                        );\n                      }).toList(),\n                      onChanged: (value) {\n                        setState(() {\n                          _selectedCategory = value;\n                        });\n                      },\n                      validator: (value) => value == null ? \'Please select a category\' : null,\n                    ),\n                    const SizedBox(height: 32),\n                    ElevatedButton(\n                      onPressed: _saveProduct,\n                      child: const Text(\'Save Product\'),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n}\n